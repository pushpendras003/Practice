"""
# Definition for a Node.
class Node:
    def __init__(self, val = 0, neighbors = None):
        self.val = val
        self.neighbors = neighbors if neighbors is not None else []
"""

class Solution:
    def cloneGraph(self, node: 'Node') -> 'Node':
        if not node:
            return 
        q=deque([node])
        clones={node.val:Node(node.val,[])}
        while q:
            v=q.popleft()
            curr_clone=clones[v.val]
            for i in v.neighbors:
                if i.val not in clones:
                    clones[i.val]=Node(i.val,[])
                    q.append(i)
                curr_clone.neighbors.append(clones[i.val])
                
        return clones[node.val]
