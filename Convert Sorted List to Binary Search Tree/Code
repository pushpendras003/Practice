# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def sortedListToBST(self, head: Optional[ListNode]) -> Optional[TreeNode]:
        def helper(head):
            if head==None:
                return None
            if head.next==None:
                return TreeNode(head.val)
            slow=head
            fast=head
            while fast and fast.next:
                fast=fast.next.next
                if fast==None or fast.next==None:
                    t=slow
                slow=slow.next
            root=TreeNode(slow.val)
            t.next=None
            root.left=helper(head)
            root.right=helper(slow.next)
            return root
        return helper(head)
            
