# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class BSTIterator:

    def __init__(self, root: Optional[TreeNode]):
        self.root_node=root
        self.current_node=root
        self.stack=[]
        

    def next(self) -> int:
        while self.current_node:
            self.stack.insert(0,self.current_node)
            self.current_node=self.current_node.left
        ans=self.stack.pop(0)
        self.current_node=ans.right
        return ans.val
        

    def hasNext(self) -> bool:
        return self.current_node != None or len(self.stack)!=0
        


# Your BSTIterator object will be instantiated and called as such:
# obj = BSTIterator(root)
# param_1 = obj.next()
# param_2 = obj.hasNext()
