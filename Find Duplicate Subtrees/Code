# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def findDuplicateSubtrees(self, root: Optional[TreeNode]) -> List[Optional[TreeNode]]:
        result=[]
        subtreeMap={}
        def dfs(node):
            if not node:
                return "#"
            left=dfs(node.left)
            right=dfs(node.right)
            subtree=f"{node.val},{left},{right}"
            subtreeMap[subtree]=subtreeMap.get(subtree,0)+1
            if subtreeMap[subtree]==2:
                result.append(node)
            return subtree
        dfs(root)
        return result
