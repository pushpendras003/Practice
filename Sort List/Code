# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def sortList(self, head: Optional[ListNode]) -> Optional[ListNode]:
        def mergelist(l1,l2):
            p=ListNode()
            curr=p
            
            while l1!=None and l2!=None:
                if l1.val<=l2.val:
                    curr.next=l1
                    l1=l1.next
                else:
                    curr.next=l2
                    l2=l2.next
                curr=curr.next
            if l1!=None:
                curr.next=l1
                l1=l1.next
            if l2!=None:
                curr.next=l2
                l2=l2.next
            return p.next
                


        def helper(head):
            if head==None or head.next==None:
                return head
            slow=head
            fast=head
            temp=None
            while fast and fast.next:
                temp=slow
                slow=slow.next
                fast=fast.next.next
            temp.next=None

            fast=head
            l1=helper(fast)
            l2=helper(slow)
            
            return mergelist(l1,l2)
        return helper(head)
        
