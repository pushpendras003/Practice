from collections import deque
class Solution:
    def shortestPath(self, grid: List[List[int]], k: int) -> int:
        if len(grid)==1 and len(grid[0])==1:
            return 0
        q=deque([(0,0,k,0)])
        visited=set([(0,0,k)])

        if k>(len(grid)-1)+(len(grid[0])-1):
            return len(grid)-1+len(grid[0])-1
        while q:
            r,c,eliminate,steps=q.popleft()
            for row,column in([(r-1,c),(r,c+1),(r+1,c),(r,c-1)]):
                if row>=0 and row<=len(grid)-1 and column>=0 and column <len(grid[0]):
                    if grid[row][column]==1 and eliminate>0 and (row,column,eliminate-1) not in visited:
                        visited.add((row,column,eliminate-1))
                        q.append((row,column,eliminate-1,steps+1))
                    if grid[row][column]==0 and (row,column,eliminate) not in visited:
                        if row==len(grid)-1 and column==len(grid[0])-1:
                            return steps+1
                        visited.add((row,column,eliminate))
                        q.append((row,column,eliminate,steps+1))
        return -1
